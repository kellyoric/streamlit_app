import streamlit as st
import pandas as pd
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.io as pio
import re
from collections import Counter
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
from wordcloud import WordCloud
import os
import time
import numpy as np

# Configuration de la page
st.set_page_config(
    page_title="Transport Id√©al ENSEA",
    page_icon="üöå",
    layout="wide",
    initial_sidebar_state="expanded"
)

# D√©finition des styles CSS personnalis√©s
st.markdown("""
<style>
    .main-title {
        text-align: center; 
        color: #1E88E5;
        font-size: 36px;
        font-weight: bold;
        margin-bottom: 20px;
    }
    
    .sub-title {
        text-align: center;
        color: #004D40;
        font-size: 24px;
        font-weight: bold;
    }
    
    .section-title {
        text-align: center;
        color: #333;
        font-size: 20px;
        margin-top: 30px;
        margin-bottom: 20px;
    }
    
    .info-box {
        padding: 20px;
        border-radius: 10px;
        background-color: #f0f2f6;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }
    
    .metric-box {
        background-color: #0066cc;
        color: white;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .offer-box {
        background-color: #f8f9fa;
        padding: 30px;
        border-radius: 15px;
        border: 2px solid #0066cc;
        text-align: center;
        margin: 20px 0;
    }
    
    .footer {
        text-align: center;
        margin-top: 40px;
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 10px;
    }
</style>
""", unsafe_allow_html=True)

# Fonction pour cr√©er la page de garde (Partie 1)
def page_garde():
        
    # Cr√©ation de trois colonnes pour les logos
    col1, col2, col3 = st.columns([1, 2, 1])

    import base64
    def get_base64_of_bin_file(bin_file):
        with open(bin_file, 'rb') as f:
             data = f.read()
        return base64.b64encode(data).decode()

# Convertir l'image en base64
    #img_base64 = get_base64_of_bin_file("NEW_LOGO_ENSEA_sans_fond.PNG")
    with col2:
        st.markdown(
        f"""
        <div style="text-align: center;">
            <img src="data:image/png;base64,{img_base64}" width="200">
            <p style="font-weight: bold; margin-top: 0.5rem;">√âcole Nationale Sup√©rieure de Statistique et d'√âconomie Appliqu√©e</p>
        </div>
        """,
        unsafe_allow_html=True
    )
  

    
    # Titre de l'√©tude
    st.markdown("<div class='main-title'>OFFRE  DE TRANSPORT ID√âALE POUR LES √âTUDIANTS DE L'ENSEA</div>", unsafe_allow_html=True)
    
    # Encadr√© pour le nom du professeur
    st.markdown("---")
    st.markdown("<h3 style='text-align: center;'>SOUS LA SUPERVISION DE:</h3>", unsafe_allow_html=True)
    st.markdown("<div class='sub-title'>Mr COULIBALY M. Raymond</div>", unsafe_allow_html=True)
    st.markdown("---")
    
    # Photos et noms de l'√©quipe
    st.markdown("<h3 style='text-align: center;'>√âQUIPE</h3>", unsafe_allow_html=True)
    
    # Cr√©ation de 4 colonnes pour les membres de l'√©quipe
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.image("HVAJM.jpeg", width=150, caption="HOUENOU VANGAH ")
    
    with col2:
        st.image("yoric.jpeg", width=135, caption="NGOUDJO KELL",)
    
    with col3:
        st.image("SAWADOGO.jpeg", width=150, caption="SAWADOGO ALBERT")
    
    with col4:
        st.image("AMAVI.jpeg", width=150, caption="TOMALOU AMAVI")
    
    
# Fonction pour cr√©er la partie 2 (Contexte et justification)
def partie_2():
    st.title("CONTEXTE DE L'√âTUDE")
    
    # Cadre 1: Contexte et justification de l'√©tude
    st.markdown("<div class='info-box'>", unsafe_allow_html=True)
    #st.markdown("<h3>Contexte </h3>", unsafe_allow_html=True)
    st.write("""
    L'ENSEA (√âcole Nationale Sup√©rieure de Statistique et d'√âconomie Appliqu√©e) accueille chaque ann√©e des centaines d'√©tudiants 
    venant de diff√©rentes r√©gions de la C√¥te d'Ivoire et de l'√©tranger. Le transport quotidien entre le lieu de r√©sidence et 
    l'√©tablissement repr√©sente un d√©fi majeur pour ces √©tudiants, impactant leur ponctualit√©, leur assiduit√© et leur bien-√™tre.
    
    Cette √©tude vise √† identifier les besoins sp√©cifiques des √©tudiants en mati√®re de transport et √† proposer une offre de 
    service adapt√©e qui r√©pond √† leurs attentes tout en tenant compte des contraintes √©conomiques, temporelles et g√©ographiques.
    
    La pertinence de cette √©tude repose sur la n√©cessit√© d'am√©liorer les conditions d'√©tudes des √©tudiants de l'ENSEA en 
    facilitant leur mobilit√© quotidienne, facteur essentiel de leur r√©ussite acad√©mique.
    """)
    st.markdown("</div>", unsafe_allow_html=True)

    st.title("OBJECTIFS DE L'√âTUDE")
    st.markdown("<div class='info-box'>", unsafe_allow_html=True)

    st.subheader("Objectif principal")

    st.write("""
    Identifier les caract√©ristiques d‚Äôune offre de transport optimale r√©pondant aux besoins, pr√©f√©rences et contraintes des √©tudiants de l‚ÄôENSEA afin d‚Äôam√©liorer leur mobilit√© quotidienne et leur qualit√© de vie.
    """)

    st.subheader("Objectifs sp√©cifiques")

    st.write("""
    1. Analyser les modes de transport actuellement utilis√©s par les √©tudiants et √©valuer leur niveau de satisfaction.  
    2. Identifier les principaux crit√®res de choix d‚Äôun mode de transport (co√ªt, s√©curit√©, accessibilit√©, ponctualit√©, confort, etc.).  
    3. Mesurer les difficult√©s rencontr√©es par les √©tudiants dans leurs d√©placements quotidiens (retards, embouteillages, co√ªt √©lev√©, etc.).  
    4. Explorer les attentes des √©tudiants vis-√†-vis d‚Äôune offre de transport id√©ale, notamment en termes de services compl√©mentaires.  
    
    """)

    st.title("METHODOLOGIE DE L'√âTUDE")
    st.markdown("<div class='info-box'>", unsafe_allow_html=True)
    st.write("""
    1. Pr√©paration d'un questionnaire de 21 questions sur Kobotoolbox.  
    2. Sensibilisaion de la population cible via des passages dans les classes.  
    3. Collecte des donn√©es par CAWI entre le 21/03 et le 02/04/2025.  
    4. Analyse des donn√©es √† l'aide de Python et de biblioth√®ques telles que Pandas, Matplotlib et Plotly.  
    """)

    st.title("DONNEES")
    st.markdown("<div class='info-box'>", unsafe_allow_html=True)
    
    # Cadre 2: M√©triques de l'enqu√™te
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("<div class='metric-box'<p style='font-size: 24px';>Individus capt√©s / touch√©s </p> ", unsafe_allow_html=True)
        st.markdown("<h1 style='font-size: 48px;text-align:center'>118 / 147 √©tudiants</h1>", unsafe_allow_html=True)
        #st.markdown("<p>Individus enqu√™t√©s</p>", unsafe_allow_html=True)
        st.markdown("</div>", unsafe_allow_html=True)
    
    with col2:
        st.markdown("<div class='metric-box'<p style='font-size: 24px';>Dur√©e de la collecte </p> ", unsafe_allow_html=True)
        st.markdown("<h1 style='font-size: 48px;text-align:center'>02 Semaines</h1>", unsafe_allow_html=True)
        #st.markdown("<p>Individus enqu√™t√©s</p>", unsafe_allow_html=True)
        st.markdown("</div>", unsafe_allow_html=True)
    
    # Graphiques relatifs √† l'enqu√™te
    st.markdown("<div class='section-title'><b>CARACTERISTIQUES SOCIO-DEMOGRAPHIQUES</b></div>", unsafe_allow_html=True)
    
    # Cr√©ation de donn√©es fictives pour les graphiques
    col1, col2 = st.columns(2)
    data = pd.read_csv("cleaned_dataset.csv")

    # üîé Filtrage interactif
    

    # üé® Mise en page avec colonnes pour une meilleure pr√©sentation
    col1, col2 = st.columns(2)

    # R√©partition par sexe
    with col1:
        
        sexe_counts = data["sex"].value_counts().reset_index()
        sexe_counts.columns = ['Sexe', 'Effectif']
        couleurs = {'masculin': '#4682B4', 'feminin': 'lightpink'}
        fig_sexe = px.pie(sexe_counts, names='Sexe', values='Effectif', color='Sexe',
                          color_discrete_map=couleurs, title="R√©partition par Sexe")
        fig_sexe.update_layout(title_x=0.5, title_font=dict(size=20))
        st.plotly_chart(fig_sexe, use_container_width=True)

    # R√©partition par √¢ge
    with col2:
        
        age_counts = data['age'].value_counts().reset_index()
        age_counts.columns = ['Tranche d\'√¢ge', 'Effectif']
        fig_age = px.bar(age_counts, x='Effectif', y='Tranche d\'√¢ge', orientation='h',
                         text='Effectif', title="R√©partition par Tranche d'√¢ge",
                         color='Tranche d\'√¢ge', color_discrete_sequence=px.colors.sequential.Blues_r)
        fig_age.update_layout(title_x=0.5, title_font_size=20)
        st.plotly_chart(fig_age, use_container_width=True)

    # Nouvelle ligne de colonnes
    col3, col4 = st.columns(2)

    # R√©partition par nationalit√©
    with col3:
        
        nat_counts = data['nationality'].value_counts().reset_index()
        nat_counts.columns = ['Nationalit√©', 'Effectif']
        fig_nat = px.bar(nat_counts, y='Nationalit√©', x='Effectif', orientation='h',
                         text='Effectif', title="R√©partition par Nationalit√©",
                         color_discrete_sequence=['#4682B4'])
        fig_nat.update_layout(title_x=0.5, title_font_size=20)
        st.plotly_chart(fig_nat, use_container_width=True)

    # R√©partition par Fili√®re et Classe
    with col4:
        
        liste = ["ISE" if val == "ise" else "AS" if val == "as" else None for val in data["course"].values]
        data["course"] = liste
        data_counts = data.groupby(['course', 'class']).size().reset_index(name='Effectif')
        colors = {
            'as1': '#1f77b4', 'as2': '#6baed6', 'as3': '#c6dbef',
            'ise1': '#ff7f0e', 'ise2': '#ffa07a', 'ise3': '#ffcc99'
        }
        fig_class = px.bar(data_counts, x='course', y='Effectif', color='class',
                           title="R√©partition par Fili√®re et Classe",
                           text='Effectif', barmode='stack', color_discrete_map=colors)
        fig_class.update_layout(title_x=0.5, title_font_size=20)
        st.plotly_chart(fig_class, use_container_width=True)



    # üìä Ajout du tableau CSV ici
    st.markdown("<h3>Donn√©es d√©taill√©es de l'enqu√™te</h3>", unsafe_allow_html=True)

    try:
        df = pd.read_csv("cleaned_dataset.csv")
        df = df.drop(columns=['Unnamed: 0'])
        st.dataframe(df, use_container_width=True)
    except FileNotFoundError:
        st.warning("Le fichier 'cleaned_dataset.csv' est introuvable. Veuillez v√©rifier le chemin du fichier.")


# Fonction pour cr√©er la partie 3 (Analyses effectu√©es)

    
def partie_3():
    st.title("ANALYSES DES DONNEES")
    st.markdown("<div class='section-title'><b>Analyses approfondies pour d√©terminer l'offre id√©ale</b></div>", unsafe_allow_html=True)
    data = pd.read_csv("cleaned_dataset.csv")
    # 1. Services de transport utilis√©s
    col1, col2 = st.columns([2, 1])
    with col1:
        counts = data['main_service'].value_counts().reset_index()
        counts.columns = ['Service', 'Effectif']
        fig = px.bar(counts, x='Service', y='Effectif', text='Effectif',
                     color='Service', color_discrete_sequence=px.colors.qualitative.Pastel,
                     title="Services de transport utilis√©s")
        fig.update_layout(title_x=0.5, title_font=dict(size=22))
        fig.update_traces(textposition='auto')
        st.plotly_chart(fig, use_container_width=True)
    with col2:
        st.markdown("""
        **Interpr√©tation :**
        La majorit√© des √©tudiants utilisent les services de type yango, suivi des taxi rouges. Cela refl√®te les pr√©f√©rences actuelles bas√©es sur la disponibilit√© et le co√ªt.
        """)

    # 2. Dur√©e moyenne actuelle du trajet
    col1, col2 = st.columns([2, 1])
    with col1:
        counts = data['mean_time'].value_counts().reset_index()
        counts.columns = ['Dur√©e', 'Effectif']
        fig = px.bar(counts, x='Dur√©e', y='Effectif', text='Effectif',
                     color='Dur√©e', color_discrete_sequence=px.colors.qualitative.Vivid,
                     title="Dur√©e moyenne actuelle du trajet")
        fig.update_layout(title_x=0.5, title_font=dict(size=22))
        fig.update_traces(textposition='auto')
        st.plotly_chart(fig, use_container_width=True)
    with col2:
        st.markdown("""
        **Interpr√©tation :**
        La majorit√© des trajets se situent entre 10 et 15 minutes, ce qui indique une localisation plut√¥t favorable des √©tudiants.
        """)

    # 3. Dur√©e de trajet souhait√©e
    col1, col2 = st.columns([2, 1])
    with col1:
        counts = data['mean_time_wanted'].value_counts().reset_index()
        counts.columns = ['Dur√©e souhait√©e', 'Effectif']
        fig = px.bar(counts, x='Dur√©e souhait√©e', y='Effectif', text='Effectif',
                     color='Dur√©e souhait√©e', color_discrete_sequence=px.colors.qualitative.Vivid,
                     title="Dur√©e de trajet souhait√©e")
        fig.update_layout(title_x=0.5, title_font=dict(size=22))
        fig.update_traces(textposition='auto')
        st.plotly_chart(fig, use_container_width=True)
    with col2:
        st.markdown("""
        **Interpr√©tation :**
        Les √©tudiants aimeraient id√©alement des trajets de moins de 15 minutes, montrant une exigence forte sur la rapidit√©.
        """)

    # 4. Crit√®re principal de choix du service
    col1, col2 = st.columns([2, 1])
    with col1:
        counts = data['criteria'].value_counts().reset_index()
        counts.columns = ['Crit√®re', 'Effectif']
        fig = px.bar(counts, x='Crit√®re', y='Effectif', text='Effectif',
                     color='Crit√®re', color_discrete_sequence=px.colors.qualitative.Safe,
                     title="Crit√®re principal de choix du service")
        fig.update_layout(title_x=0.5, title_font=dict(size=22))
        fig.update_traces(textposition='auto')
        st.plotly_chart(fig, use_container_width=True)
    with col2:
        st.markdown("""
        **Interpr√©tation :**
        Le prix ,la s√©curit√© et la rapidit√© ressortent clairement comme les crit√®res d√©terminants dans le choix du transport.
        """)
    
    def normaliser_terme(terme):
        equivalences = {
            'wi-fi': 'wifi', 'wi fi': 'wifi', 'wifi': 'wifi', 'Wifi': 'wifi', 'Wi-Fi': 'wifi', 'Wi-fi': 'wifi',
            'usb': 'usb', 'prise': 'usb', 'prise usb': 'usb', 'chargeur': 'usb',
            'eau': 'eau', "l'eau": 'eau',
            'clim': 'climatisation', 'climatisation': 'climatisation', 'climatisatio': 'climatisation', 'la clim': 'climatisation',
            'musique': 'musique'
        }
        return equivalences.get(terme.strip().lower(), terme.strip().lower())

    # === Liste des termes √† exclure (stop words) ===
    STOP_WORDS = {"de", "des", "le", "la", "les", "et", "l'", "un", "une", "d'", "√†", "au", "aux", "du"}

    # === Analyse des services avec exclusion des mots ind√©sirables ===
    def analyser_services_simplifie(data, colonne):
        compteur = Counter()
        for val in data[colonne].dropna().astype(str):
            elements = re.split(r'[;,/\\|\n\s]+', val)  # Meilleure gestion des s√©parateurs
            services_uniques = set()
            for el in elements:
                el_clean = normaliser_terme(el)
                if el_clean and el_clean not in STOP_WORDS:  # Exclusion des mots ind√©sirables
                    services_uniques.add(el_clean)
            for item in services_uniques:
                compteur[item] += 1
        return pd.DataFrame(compteur.items(), columns=["Service", "Occurrences"]).sort_values(by="Occurrences", ascending=False)

    # === Suppression des modalit√©s compos√©es si leurs √©l√©ments existent d√©j√† ===
    def nettoyer_modalites_composes(data_services):
        services_exacts = set(data_services["Service"].values)
        lignes_a_supprimer = []
        for idx, service in data_services["Service"].items():
            composants = re.split(r'[\\s\\-_]+', service)
            composants = [c for c in composants if c in services_exacts and c != service]
            if len(composants) >= 2:
                lignes_a_supprimer.append(idx)
        return data_services.drop(lignes_a_supprimer).reset_index(drop=True)



        # === Application des traitements ===
    services_data = analyser_services_simplifie(data, 'other_services')
    services_data_final = nettoyer_modalites_composes(services_data)

    services = services_data_final["Service"].tolist()
    occurrences = services_data_final["Occurrences"].tolist()
    sizes = [10 + (o * 3) for o in occurrences]
    # 5. Souhait de services suppl√©mentaires (Wordcloud)
    col1, col2 = st.columns([2, 1])
    with col1:
        st.subheader("Services additionnels souhait√©s")
        freq = dict(zip(services_data_final['Service'], services_data_final['Occurrences']))
        wordcloud = WordCloud(width=800, height=400, background_color='white', colormap='viridis').generate_from_frequencies(freq)
        fig, ax = plt.subplots(figsize=(14, 7))
        ax.imshow(wordcloud, interpolation='bilinear')
        ax.axis('off')
        st.pyplot(fig, use_container_width=True)
    with col2:
        st.markdown("""
        **Interpr√©tation :**
        Les √©tudiants souhaitent principalement des services offrant du wifi et de la climatisation √† bord.
        """)

    # 6. R√©partition des prix : Actuel vs Souhait√©
    col1, col2 = st.columns([2, 1])

     #Nettoyage - garder seulement les modalit√©s valides
    modalites_valides = ['moins_1000', 'frs_1000_1500', 'frs_1500_2000', 'plus_2000']

    data_clean = data[
        data['price_vehicle'].isin(modalites_valides) &
        data['price_wanted'].isin(modalites_valides)
    ].copy()

    # Ordonner les cat√©gories
    ordre_categories = ['moins_1000', 'frs_1000_1500', 'frs_1500_2000', 'plus_2000']
    data_clean['price_vehicle'] = pd.Categorical(data_clean['price_vehicle'], categories=ordre_categories, ordered=True)
    data_clean['price_wanted'] = pd.Categorical(data_clean['price_wanted'], categories=ordre_categories, ordered=True)

    df_compare = pd.DataFrame({
    'Tranche de prix': ordre_categories * 2,
    'Proportion': [
        (data_clean['price_vehicle'] == cat).mean() for cat in ordre_categories
    ] + [
        (data_clean['price_wanted'] == cat).mean() for cat in ordre_categories
    ],
    'Type': ['Actuel']*4 + ['Souhait√©']*4
        })
    with col1:
        fig = px.bar(df_compare,
                    x='Tranche de prix',
                    y='Proportion',
                    color='Type',
                    barmode='group',
                    title='Prix actuel vs souhait√©',
                    labels={'Proportion': 'Proportion des r√©pondants'},
                    color_discrete_map={'Actuel': '#e74c3c', 'Souhait√©': '#2ecc71'})
        fig.update_layout(title_x=0.5, xaxis_title='Tranche de prix', yaxis_tickformat='.0%', plot_bgcolor='white', title_font_size=22)
        fig.update_traces(texttemplate='%{y:.0%}', textposition='outside')
        st.plotly_chart(fig, use_container_width=True)
    with col2:
        st.markdown("""
        **Interpr√©tation :**
        On note une forte aspiration pour des tarifs inf√©rieur √† 1000 FCFA, alors que les prix actuels d√©passent souvent ce seuil.
        """)

    # Sexe √ó service utilis√©
    col1, col2 = st.columns([2, 1])
    data = pd.read_csv("cleaned_dataset.csv")
    with col1:
        data_sexe_service = data[['sex', 'main_service']].dropna()
        data_sexe_service['sex'] = data_sexe_service['sex'].str.lower().str.strip()
        grouped = data_sexe_service.groupby(['sex', 'main_service']).size().reset_index(name='Effectif')
        color_map = {'masculin': '#4682B4', 'feminin': 'lightpink'}
        fig_sexe_service = px.bar(grouped, x='main_service', y='Effectif', color='sex', barmode='group',
                                text='Effectif',
                                title="Services de transport par sexe",
                                labels={'sex': 'Sexe', 'main_service': 'Service utilis√©'},
                                color_discrete_map=color_map)
        fig_sexe_service.update_layout(title_x=0.5, title_font_size=22,
                                    xaxis_title="Service utilis√©", yaxis_title="Nombre d'√©tudiants",
                                    legend_title="Sexe", height=500)
        fig_sexe_service.update_traces(textposition='outside')
        st.plotly_chart(fig_sexe_service, use_container_width=True)
    with col2:
        st.markdown("#### Interpr√©tation")
        st.write("""
        Ceci pr√©sente une r√©partition de l'utilisation des services de transports actuels par sexe.On remarque que aucune fille de notre √©chantillon n'a l'habitude de marcher.
        """)

    # Classe d'√¢ge √ó service
    col1, col2 = st.columns([2, 1])
    with col1:
        df = data.dropna(subset=['age', 'main_service'])
        grouped = df.groupby(['age', 'main_service'], observed=True).size().reset_index(name='Effectif')
        grouped.rename(columns={'age': 'Tranche d‚Äô√¢ge'}, inplace=True)
        total_par_age = grouped.groupby('Tranche d‚Äô√¢ge')['Effectif'].sum().reset_index(name='Total_Effectif')
        grouped = grouped.merge(total_par_age, on='Tranche d‚Äô√¢ge')
        grouped['Proportion_ponderee'] = (grouped['Effectif'] / grouped['Total_Effectif']) * grouped['Total_Effectif']
        fig_age_service = px.bar(grouped,
                                x='Tranche d‚Äô√¢ge',
                                y='Proportion_ponderee',
                                color='main_service',
                                title="Services de transport par √¢ge",
                                labels={'main_service': 'Service de transport', 'Proportion_ponderee': 'Effectif pond√©r√©'},
                                text=grouped['Effectif'].astype(str) + ' (' + (grouped['Effectif']/grouped['Total_Effectif']*100).round(1).astype(str) + '%)',
                                barmode='stack',
                                height=500,
                                color_discrete_sequence=px.colors.qualitative.Vivid)
        fig_age_service.update_layout(title_x=0.5,
                                    title_font_size=22,
                                    xaxis_title="Tranche d‚Äô√¢ge",
                                    yaxis_title="Effectif pond√©r√©")
        fig_age_service.update_traces(textposition='inside')
        st.plotly_chart(fig_age_service, use_container_width=True)
    with col2:
        st.markdown("#### Interpr√©tation")
        st.write("""
        Ce graphique illustre les services de transport privil√©gi√©s selon les tranches d‚Äô√¢ge avec le service Yango √©tant majoritaire dans tous les cas.
        """)

    # Crit√®re de choix selon sexe
    col1, col2 = st.columns([2, 1])
    with col1:
        data['sex'] = data['sex'].str.lower().str.strip()
        df = data.dropna(subset=['sex', 'criteria'])
        grouped = df.groupby(['sex', 'criteria'], observed=True).size().reset_index(name='Effectif')
        total_par_sexe = grouped.groupby('sex')['Effectif'].transform('sum')
        grouped['Proportion'] = grouped['Effectif'] / total_par_sexe * 100
        fig_critere_sexe = px.bar(grouped, y='sex', x='Proportion', color='criteria',
                                title="Crit√®res de choix du transport selon le sexe",
                                labels={'sex': 'Sexe', 'criteria': 'Crit√®re de choix'},
                                text=grouped['Proportion'].round(1).astype(str) + '%',
                                orientation='h', barmode='stack',
                                color_discrete_sequence=px.colors.qualitative.Prism)
        fig_critere_sexe.update_layout(title_x=0.5, title_font_size=22,
                                    xaxis_title="Part (%) des crit√®res", yaxis_title="Sexe",
                                    height=500)
        fig_critere_sexe.update_traces(textposition='inside')
        st.plotly_chart(fig_critere_sexe, use_container_width=True)
    with col2:
        st.markdown("#### Interpr√©tation")
        st.write("""
        Les priorit√©s de s√©lection d'un transport varient selon le sexe.
        Cela permet de cibler les arguments commerciaux selon le public, le prix √©tant toujours pr√©dominant dans chaque sexe mais la s√©curit√© ressortant plus chez les femmes.
        """)

    # Type de v√©hicule selon crit√®re principal
    col1, col2 = st.columns([2, 1])
    with col1:
        data['criteria'] = data['criteria'].str.lower().str.strip()
        data['vehicle_type'] = data['vehicle_type'].str.lower().str.strip()
        df1 = data.dropna(subset=['criteria', 'vehicle_type'])
        grouped1 = df1.groupby(['criteria', 'vehicle_type'], observed=True).size().reset_index(name='Effectif')
        total_criteria = grouped1.groupby('criteria')['Effectif'].transform('sum')
        grouped1['Proportion'] = grouped1['Effectif'] / total_criteria * 100
        fig_vehicule_critere = px.bar(grouped1, y='criteria', x='Proportion', color='vehicle_type',
                                    title="Type de v√©hicule selon le crit√®re",
                                    text=grouped1['Proportion'].round(1).astype(str) + '%',
                                    orientation='h', barmode='stack',
                                    color_discrete_sequence=px.colors.qualitative.Set2)
        fig_vehicule_critere.update_layout(title_x=0.5, title_font_size=22,
                                        xaxis_title="Part (%)", yaxis_title="Crit√®re de choix")
        fig_vehicule_critere.update_traces(textposition='inside')
        st.plotly_chart(fig_vehicule_critere, use_container_width=True)
    with col2:
        st.markdown("#### Interpr√©tation")
        st.write("""
        Les pr√©f√©rences en mati√®re de v√©hicule sont √©troitement li√©es aux crit√®res de choix prioritaires.
        Ce graphique aide √† aligner l‚Äôoffre sur les attentes des √©tudiants.
        """)

    # Transport en soir√©e par classe
    col1, col2 = st.columns([2, 1])
    with col1:
        data['even_transport'] = data['even_transport'].str.lower().str.strip()
        data['class'] = data['class'].astype(str).str.strip()
        df_even = data.dropna(subset=['even_transport', 'class'])
        grouped_even = df_even.groupby(['class', 'even_transport'], observed=True).size().reset_index(name='Effectif')
        total_par_classe = grouped_even.groupby('class')['Effectif'].transform('sum')
        grouped_even['Proportion'] = grouped_even['Effectif'] / total_par_classe * 100
        fig_soiree_classe = px.bar(grouped_even, x='class', y='Proportion', color='even_transport',
                                title="Transport en soir√©e selon la classe",
                                text=grouped_even['Proportion'].round(1).astype(str) + '%',
                                barmode='group',
                                labels={'class': 'Classe', 'even_transport': 'Souhaite un transport en soir√©e'},
                                color_discrete_sequence=px.colors.qualitative.Bold)
        fig_soiree_classe.update_layout(title_x=0.5, title_font_size=22,
                                        yaxis_title="Part (%)", xaxis_title="Classe",
                                        height=500)
        fig_soiree_classe.update_traces(textposition='outside')
        st.plotly_chart(fig_soiree_classe, use_container_width=True)
    with col2:
        st.markdown("#### Interpr√©tation")
        st.write("""
        Certaines classes expriment une demande plus forte pour des services de transport en soir√©e.
        Cela refl√®te leurs contraintes horaires sp√©cifiques.
        """)

    # Score NPS global
    col1, col2 = st.columns([2, 1])
    with col1:
        data_clean = data[['main_service', 'nps']].dropna()
        data_clean['nps'] = pd.to_numeric(data_clean['nps'], errors='coerce')
        data_clean = data_clean.dropna()
        def classify_nps(score):
            if score >= 9:
                return 'Promoteur'
            elif score >= 7:
                return 'Passif'
            else:
                return 'D√©tracteur'
        data_clean['NPS_category'] = data_clean['nps'].apply(classify_nps)
        def compute_nps(group):
            total = len(group)
            promoters = len(group[group == 'Promoteur'])
            detractors = len(group[group == 'D√©tracteur'])
            return round(((promoters - detractors) / total) * 100, 1)
        nps_by_service = data_clean.groupby('main_service')['NPS_category'].apply(compute_nps).reset_index()
        nps_by_service.columns = ['Service', 'NPS']
        fig_nps_global = px.bar(nps_by_service, x='Service', y='NPS', text='NPS',
                                title='Score NPS global par service',
                                color='NPS', color_continuous_scale='Tealgrn')
        fig_nps_global.update_traces(textposition='outside')
        fig_nps_global.update_layout(title_x=0.5, title_font_size=22,
                                    yaxis_title='Score NPS', xaxis_title='Service',
                                    height=500)
        st.plotly_chart(fig_nps_global, use_container_width=True)
    with col2:
        st.markdown("#### Interpr√©tation")
        st.write("""
        Le score NPS est un excellent indicateur de la satisfaction globale des services.
        Les services avec un score n√©gatif m√©ritent une attention particuli√®re pour am√©liorer l‚Äôexp√©rience client.
        """)

    # R√©partition des cat√©gories NPS par service
    col1, col2 = st.columns([2, 1])
    with col1:
        nps_grouped = data_clean.groupby(['main_service', 'NPS_category']).size().reset_index(name='count')
        fig_nps_detail = px.bar(nps_grouped, x='main_service', y='count', color='NPS_category', text='count',
                                title="R√©partition des cat√©gories par service",
                                color_discrete_map={'D√©tracteur': 'red', 'Passif': 'orange', 'Promoteur': 'green'})
        fig_nps_detail.update_layout(barmode='stack', title_x=0.5, title_font_size=20,
                                    xaxis_title="Service", yaxis_title="Nombre d'√©tudiants",
                                    height=500)
        st.plotly_chart(fig_nps_detail, use_container_width=True)
    with col2:
        st.markdown("#### Interpr√©tation")
        st.write("""
        Ce graphique d√©taill√© compl√®te l‚Äôanalyse du NPS.
        Il permet de visualiser la proportion de promoteurs, passifs et d√©tracteurs par service.
        """)


        # üëâüèº Si tu veux, je peux te pr√©parer toute la suite compl√®te dans ce format homog√®ne, tu auras un rendu ultra propre, comme une vraie application pro de dataviz üé®üöÄ


    # Veux-tu que je te finalise absolument tout jusqu‚Äôau dernier graphique dans ce style ? ‚úÖ

    # Fonction pour cr√©er la partie 4 (Pr√©sentation de l'offre)
def partie_4():
    st.title("PR√âSENTATION DE L'OFFRE")
    
    # Logo de l'entreprise
    col1, col2, col3 = st.columns([1, 2, 1])
    
    # Cadre esth√©tique pour l'offre
    st.markdown("<div class='offer-box'>", unsafe_allow_html=True)
    st.markdown("<h2>L'entreprise <span style='color: #0066cc;'>TRANSEA</span> vous pr√©sente son offre de transport</h2>", unsafe_allow_html=True)
    
    # Bouton pour afficher l'offre
    if st.button("Afficher l'offre", key="afficher_offre"):
        # Animation de chargement
        progress_bar = st.progress(0)
        for i in range(100):
            time.sleep(0.01)
            progress_bar.progress(i + 1)
        st.success("Offre charg√©e avec succ√®s!")
        
        st.title("üöç Navettes ENSEA Premium")
        st.markdown("<h3 style='text-align: center; color: #1E90FF;'>Rapide, s√©curis√©, connect√© ‚Äì Votre mobilit√© √©tudiante r√©invent√©e</h3>", unsafe_allow_html=True)

        # Concept-Produit
        st.subheader("‚ú® Pourquoi Navettes ENSEA Premium ?")
        st.markdown("""
        *Concept :* Un transport √©tudiant rapide, s√©curis√© et connect√©, con√ßu pour l‚ÄôENSEA.  
        *Objectif :* Simplifier vos trajets quotidiens avec une solution abordable et moderne.
        """)
        st.markdown("---")

        # Formule Flexible
        st.subheader("üíµ Une formule adapt√©e √† vos besoins")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown("#### Tarif : 1200 FCFA")
            st.write("*Avantage :* Flexibilit√© pour vos trajets occasionnels.")
            st.write("*Argument :* Prix dans la fourchette 1000-1500 FCFA, pl√©biscit√©e par les √©tudiants pour rester accessible.")
        with col2:
            st.markdown("#### Abonnement : 20 000 FCFA / 20 trajets")
            st.write("*Avantage :* √âconomies pour les utilisateurs r√©guliers.")
            st.write("*Argument :* Tarif r√©duit √† ~1000 FCFA/trajet, r√©pondant √† l‚Äôaspiration budg√©taire des √©tudiants.")
        with col3:
            st.markdown("#### Formule Soir√©e : 1500 FCFA")
            st.write("*Avantage :* S√©curit√© pour vos retours tardifs.")
            st.write("*Argument :* R√©pond au besoin de trajets s√©curis√©s en soir√©e, appr√©ci√© par tous.")
        st.write("Paiement simplifi√© via mobile money ou notre appli.")
        st.markdown("---")

        # Package Premium
        st.subheader("üì¶ Ce que vous offre notre package")
        col4, col5, col6 = st.columns(3)
        with col4:
            st.markdown("#### Rapidit√©")
            st.write("D√©parts toutes les 15-30 min.")
            st.write("*Avantage :* Ponctualit√© garantie pour vos cours.")
            st.write("*Argument :* Identifi√© comme crit√®re cl√© par les √©tudiants pour arriver √† l‚Äôheure.")
        with col5:
            st.markdown("#### Connectivit√©")
            st.write("Wi-Fi gratuit + ports USB.")
            st.write("*Avantage :* Restez productif ou d√©tendu.")
            st.write("*Argument :* R√©pond √† la forte demande de Wi-Fi √† bord pour travailler ou se connecter.")
        with col6:
            st.markdown("#### Confort & Assistance")
            st.write("Climatisation + suivi en temps r√©el + support r√©actif.")
            st.write("*Avantage :* Voyagez sereinement.")
            st.write("*Argument :* Service client r√©actif et suivi pl√©biscit√©s pour une exp√©rience fluide.")
        st.markdown("---")

        # Services Associ√©s
        st.subheader("üì± Des services qui font la diff√©rence")
        col7, col8, col9 = st.columns(3)
        with col7:
            st.markdown("#### Application Mobile")
            st.write("R√©servation, suivi, support.")
            st.write("*Avantage :* Tout √† port√©e de main.")
            st.write("*Argument :* Application de suivi demand√©e pour planifier vos trajets facilement.")
        with col8:
            st.markdown("#### S√©curit√© Renforc√©e")
            st.write("*Avantage :* Rentrez sans souci.")
            st.write("*Argument :* R√©pond aux besoins de s√©curit√©, notamment en soir√©e.")
        with col9:
            st.markdown("#### Adapt√© √† Tous")
            st.write("Personnalisation genr√©e.")
            st.write("*Avantage :* Une offre qui vous ressemble.")
            st.write("*Argument :* Les diff√©rences de pr√©f√©rences entre gar√ßons et filles sont prises en compte.")
        st.markdown("---")

        # Tableau r√©capitulatif
        st.subheader("Tout en un coup d‚Äô≈ìil")
        data = {
            "√âl√©ment": ["Tarif", "Abonnement", "Soir√©e", "Rapidit√©", "Connectivit√©", "Confort", "Appli", "S√©curit√©"],
            "D√©tail": ["1200 FCFA", "20 000 FCFA/20 trajets", "1500 FCFA", "D√©parts fr√©quents", "Wi-Fi + USB", "Climatisation", "Suivi + r√©servation", "Nuit s√©curis√©e"],
            "B√©n√©fice": ["Flexibilit√©", "√âconomies", "S√©r√©nit√©", "Ponctualit√©", "Productivit√©", "Bien-√™tre", "Commodit√©", "Confiance"],
            "Argument": ["Prix accessible", "Budget √©tudiant", "Retours tardifs", "Crit√®re cl√©", "Demande forte", "Service r√©actif", "Planification", "Besoin s√©curit√©"]
        }
        st.table(data)

        # Synth√®se
        st.subheader("En r√©sum√©")
        st.markdown("""
        *Navettes ENSEA Premium* :  
        - *Prix* : 1200 FCFA/trajet ou 20 000 FCFA/20 trajets.  
        - *Service* : Navettes fr√©quentes, connect√©es, confortables, avec suivi et s√©curit√©.  
        - *Promesse* : Une mobilit√© simple, abordable et adapt√©e √† vos besoins, valid√©e par vos attentes.
        """, unsafe_allow_html=True)

# Fonction principale pour g√©rer la navigation entre les pages
def main():
    # Initialisation des query params pour la navigation
    params = st.query_params

    # Sidebar avec logo personnalis√©
    with st.sidebar:
        #st.image("transea.jpeg", width=200)  # Ton logo

        #st.markdown("<h2 style='margin-top: 20px;'>Navigation</h2>", unsafe_allow_html=True)

        # Menu de navigation avec mise √† jour des param√®tres d'URL
        if st.button("ACCUEIL"):
            st.query_params.page = "garde"
        if st.button("CONTEXTE & MEHODOLOGIE"):
            st.query_params.page = "contexte"
        if st.button("ANALYSES"):
            st.query_params.page = "analyses"
        if st.button("PRESENTATION DE L'OFFRE"):
            st.query_params.page = "offre"

    # Lecture du param√®tre actuel
    page = params.get("page", "garde")

    # Affichage de la page s√©lectionn√©e
    if page == "garde":
        page_garde()
    elif page == "contexte":
        partie_2()
    elif page == "analyses":
        partie_3()
    elif page == "offre":
        partie_4()

    # Pied de page
    st.markdown("---")
    st.markdown("<div class='footer'>¬© 2025 - Projet r√©alis√© dans le cadre de l'application du cours de Marketing √† l'ENSEA</div>", unsafe_allow_html=True)

    # Ex√©cution de l'application
if __name__ == "__main__":
    main()
